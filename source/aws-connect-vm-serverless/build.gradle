/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    mavenCentral()
}

dependencies {
    implementation platform('software.amazon.awssdk:bom:2.10.73')
    implementation 'software.amazon.awssdk:lambda'
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j18-impl:2.17.1'
    runtimeOnly 'com.amazonaws:aws-lambda-java-log4j2:1.5.1'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'software.amazon.awssdk:transcribestreaming:2.17.102'
    implementation 'com.amazonaws:aws-java-sdk-kinesisvideo:1.12.138'
    implementation 'com.amazonaws:aws-java-sdk-dynamodb:1.12.138'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.138'
    implementation 'com.amazonaws:aws-java-sdk-transcribe:1.12.138'
    implementation 'com.amazonaws:aws-java-sdk-cloudwatch:1.12.138'
    implementation 'com.amazonaws:amazon-kinesis-video-streams-parser-library:1.1.0'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'software.amazon.awssdk:apache-client:2.17.102'
    implementation 'software.amazon.awssdk:netty-nio-client:2.17.102'
    implementation 'org.json:json:20190722'

//    testImplementation 'org.slf4j:slf4j-simple:1.7.32'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

group = 'com.serverless'
version = 'java'
description = 'aws-connect-vm'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}
